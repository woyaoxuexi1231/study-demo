<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dependencies-parent</artifactId>
        <groupId>org.hulei</groupId>
        <version>1.0.0.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>log-framework</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

    <dependencies>

        <!-- ==================================================log4j=================================================== -->
        <!-- log4j 最早的日志框架, 是 apache 基金会一个项目, 由 Ceki Gülcü 创建. -->
        <!-- Log4jExample这个类是一个范例代码 -->
        <!-- <dependency> -->
        <!--     <groupId>log4j</groupId> -->
        <!--     <artifactId>log4j</artifactId> -->
        <!--     <version>1.2.17</version> &lt;!&ndash; 替换为最新版本 &ndash;&gt; -->
        <!-- </dependency> -->

        <!-- ==================================================jul=================================================== -->
        <!-- 这中间由于Apache想把log4j并入jdk遭到SUN公司的拒绝, 而后sun公司自己研发了JUL -->
        <!-- JulExample这个类是一个范例代码 -->

        <!-- ==================================================jcl+log4j/jcl+jul=================================================== -->
        <!-- 为了解耦日志的接口与实现, apache在2002年推出了JCL(Jakarta Commons Logging), 在当时具体的实现由log4j和JUL 完成 -->
        <!-- 这是一个日志API -->
        <!-- <dependency> -->
        <!--     <groupId>commons-logging</groupId> -->
        <!--     <artifactId>commons-logging</artifactId> -->
        <!--     <version>1.2</version> -->
        <!-- </dependency> -->
        <!-- 如果使用jcl和log4j的组合拳,就需要引入log4j的依赖 -->
        <!-- CommonsLoggingWithLog4jExample是范例代码 -->
        <!-- <dependency> -->
        <!--     <groupId>log4j</groupId> -->
        <!--     <artifactId>log4j</artifactId> -->
        <!--     <version>1.2.17</version> -->
        <!-- </dependency> -->
        <!-- 也可以不使用log4j,使用jcl+jul,那只需要引入jcl的api就行了 -->
        <!-- CommonsLoggingWithJULExample.java是范例代码 -->


        <!-- ==================================================slf4j=================================================== -->
        <!-- Ceki Gülcü 在JCL的标准制定方面产生了分歧, 离开 Apache 并先后创建了 Slf4j(门面,同样支持log4j和JUL) 和 Logback(实现) 两个项目 -->
        <!-- <dependency> -->
        <!--     <groupId>org.slf4j</groupId> -->
        <!--     <artifactId>slf4j-api</artifactId> -->
        <!--     <version>1.7.32</version> &lt;!&ndash; 根据你需要的版本号来指定 &ndash;&gt; -->
        <!-- </dependency> -->

        <!-- ==================================================slf4j+logback=================================================== -->
        <!-- Logback作为Ceki Gülcü开发的slf4j的默认实现 -->
        <!-- 如果使用slf4j+logback,那就加入logback的实现,范例代码是Slf4jWithLogbackExample -->
        <!-- <dependency> -->
        <!--     <groupId>ch.qos.logback</groupId> -->
        <!--     <artifactId>logback-classic</artifactId> -->
        <!--     <version>1.2.6</version> &lt;!&ndash; 根据你需要的版本号来指定 &ndash;&gt; -->
        <!-- </dependency> -->

        <!-- ==================================================slf4j+jul=================================================== -->
        <!-- slf4j桥接到jul(JDK的实现),即使用slf4j的API,实现由JDK输出 -->
        <!-- 如果使用slf4j+jul,那么就需要引入这个桥接包,范例代码是Slf4jWithJULExample.java -->
        <!-- <dependency> -->
        <!--     <groupId>org.slf4j</groupId> -->
        <!--     <artifactId>slf4j-jdk14</artifactId> -->
        <!--     <version>1.7.32</version> &lt;!&ndash; 根据你需要的版本号来指定 &ndash;&gt; -->
        <!-- </dependency> -->

        <!-- ==================================================slf4j+log4j=================================================== -->
        <!-- slf4j桥接到log4j的桥接包 -->
        <!-- 范例代码Slf4jWithLog4jExample -->
        <!-- <dependency> -->
        <!--     <groupId>org.slf4j</groupId> -->
        <!--     <artifactId>slf4j-log4j12</artifactId> -->
        <!-- </dependency> -->

        <!-- ==================================================log4j2推出=================================================== -->
        <!-- 2014 年 Apache 推出了 Log4j2, Log4j2 与 log4j 不兼容, 经过大量深度优化, 其性能显著提升 -->
        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-jcl -->
        <!-- ==================================================jcl+log4j2=================================================== -->
        <!-- <dependency> -->
        <!--     <groupId>commons-logging</groupId> -->
        <!--     <artifactId>commons-logging</artifactId> -->
        <!--     <version>1.2</version> -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!--     <groupId>org.apache.logging.log4j</groupId> -->
        <!--     <artifactId>log4j-jcl</artifactId> -->
        <!--     <version>2.12.1</version> -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!--     <groupId>org.apache.logging.log4j</groupId> -->
        <!--     <artifactId>log4j-core</artifactId> -->
        <!--     <version>2.12.1</version> -->
        <!-- </dependency> -->


        <!-- ==================================================slf4j+log4j2=================================================== -->
        <!-- Slf4jWithLog4jExample是一个范例代码 -->
        <!-- 这是一个slf4j桥接到log4j2 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.32</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.17.1</version>
        </dependency>


        <!-- ==================================================jul->slf4j->logback=================================================== -->
        <!-- 我这里加入了一个JDK日志全部重定向到SJF4j的依赖包,还加了一个logback的实现 -->
        <!-- 按我的猜想,使用jdk的日志打印会被重定向到logback -->
        <!-- 需要在代码里使用SLF4JBridgeHandler.removeHandlersForRootLogger()和SLF4JBridgeHandler.install()这两个方法才行 -->
        <!-- 范例代码为JulToSlf4jToLogbackExample.java -->
        <!-- <dependency> -->
        <!--     <groupId>org.slf4j</groupId> -->
        <!--     <artifactId>slf4j-api</artifactId> -->
        <!--     <version>1.7.32</version> &lt;!&ndash; 根据你需要的版本号来指定 &ndash;&gt; -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!--     <groupId>org.slf4j</groupId> -->
        <!--     <artifactId>jul-to-slf4j</artifactId> -->
        <!--     <version>1.7.32</version> &lt;!&ndash; 或者其他版本 &ndash;&gt; -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!--     <groupId>ch.qos.logback</groupId> -->
        <!--     <artifactId>logback-classic</artifactId> -->
        <!--     <version>1.2.6</version> &lt;!&ndash; 根据你需要的版本号来指定 &ndash;&gt; -->
        <!-- </dependency> -->


        <!-- ==================================================jul->log4j2=================================================== -->
        <!--
         `log4j-jul`是Apache的Log4j项目的一部分，它是一个名为`org.apache.logging.log4j.jul`的模块¹。这个模块主要用于实现Java的日志框架之间的切换⁴。
        在Java的日志框架中，有一些包使用了Java自带的`java.util.logging (JUL)`，而Log4j的用户又非常多。因此，`log4j-jul`就提供了一套API，用于实现不同Logger之间的切换⁴。
        也就是说，在你的应用代码里，只需调用Commons Logging的接口，底层实现可以是Log4j，也可以是Java Util Logging⁴。
         -->
        <!-- 范例代码为JulToLog4j2Bridge.java -->
        <!-- <dependency> -->
        <!--     <groupId>org.apache.logging.log4j</groupId> -->
        <!--     <artifactId>log4j-jul</artifactId> -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!--     <groupId>org.apache.logging.log4j</groupId> -->
        <!--     <artifactId>log4j-core</artifactId> -->
        <!-- </dependency> -->


        <!-- ==================================================jboss-logging=================================================== -->
        <!-- <dependency> -->
        <!--     <groupId>org.jboss.logging</groupId> -->
        <!--     <artifactId>jboss-logging</artifactId> -->
        <!-- </dependency> -->


        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

    </dependencies>

</project>