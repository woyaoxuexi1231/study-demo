<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- 指定当前的 POM 模型的版本, 对于 maven2 以及 maven3 只能是 4.0.0 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 项目属于哪个组, 一般写所在组织或者公司 -->
    <groupId>com.hundsun</groupId>
    <!-- 定义当前项目的唯一 ID -->
    <artifactId>demo-parent</artifactId>
    <!-- 当前项目的版本 -->
    <version>1.0.0.0-SNAPSHOT</version>
    <!-- 打包方式, 如果没有指定那么默认以 jar 方式打包 -->
    <!-- 对于聚合和父模块, 必须是 pom 模式 -->
    <packaging>pom</packaging>


    <!--springboot 父依赖-->
    <!-- 定义了 Java 编译版本，如上为 1.6。-->
    <!-- 使用 UTF-8 格式编码-->
    <!-- maven源文件和目标文件编译的版本-->
    <!-- 执行打包操作的配置-->
    <!-- 自动化的资源过滤-->
    <!-- 自动化的插件配置-->
    <!-- 针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml-->
    <!--仅仅针对单项目，实际环境往往都有自己parent项目，这个时候自己在parent项目中定义-->
    <!--<parent>-->
    <!--    <groupId>org.springframework.boot</groupId>-->
    <!--    <artifactId>spring-boot-starter-parent</artifactId>-->
    <!--    <version>2.2.6.RELEASE</version>-->
    <!--</parent>-->


    <properties>

        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <spring.boot.dependencies.version>2.3.1.RELEASE</spring.boot.dependencies.version>
        <spring.cloud.dependencies.version>Hoxton.RELEASE</spring.cloud.dependencies.version>

        <!--spring-boot-dependencies 2.3.1.RELEASE 包含的依赖版本-->
        <spring.boot.starter.version>2.3.1.RELEASE</spring.boot.starter.version>
        <spring.boot.starter.web.version>2.3.1.RELEASE</spring.boot.starter.web.version>
        <spring.boot.starter.test.version>2.3.1.RELEASE</spring.boot.starter.test.version>
        <spring.boot.starter.log4j2.version>2.3.1.RELEASE</spring.boot.starter.log4j2.version>
        <spring.boot.starter.data.redis>2.3.1.RELEASE</spring.boot.starter.data.redis>
        <lombok.version>1.18.12</lombok.version>
        <junit.version>4.12</junit.version>
        <mysql.connector.java.version>8.0.19</mysql.connector.java.version>
        <commons.lang3.version>3.9</commons.lang3.version>
        <aspectjweaver.version>1.9.5</aspectjweaver.version>
        <pagehelper.version>5.2.0</pagehelper.version>
        <apache.poi.ooxml.version>4.1.1</apache.poi.ooxml.version>
        <apache.poi.version>4.1.1</apache.poi.version>
        <apache.curator.framework.version>2.13.0</apache.curator.framework.version>
        <apache.curator.recipes.version>2.13.0</apache.curator.recipes.version>
        <commons.io.version>2.6</commons.io.version>
        <alibaba.fastjson.version>1.2.70</alibaba.fastjson.version>
        <ojdbc8.version>19.3.0.0</ojdbc8.version>
        <orai18n.version>19.3.0.0</orai18n.version>


        <!--第三方依赖-->
        <!--一些工具组件-->
        <jpa.version>1.0</jpa.version>
        <hutool.core.version>5.6.1</hutool.core.version>
        <guava.version>21.0</guava.version>
        <cglib.version>3.2.10</cglib.version>
        <redisson.version>3.13.6</redisson.version>
        <redisson.spring.boot.starter.verison>3.13.6</redisson.spring.boot.starter.verison>
        <!--Mybatis框架-->
        <mapper.spring.boot.starter.version>4.2.1</mapper.spring.boot.starter.version>
        <mybatis.version>3.5.5</mybatis.version>
        <mybatis.spring.verison>2.0.5</mybatis.spring.verison>
        <pagehelper.spring.boot.starter.version>1.3.0</pagehelper.spring.boot.starter.version>
        <mybatis.generator.core.version>1.3.2</mybatis.generator.core.version>
        <javax.servlet.jsp.version>2.2.1</javax.servlet.jsp.version>
        <apache.dubbo.springboot.starter.version>2.7.8</apache.dubbo.springboot.starter.version>
        <apache.curator.x.discovery>2.13.0</apache.curator.x.discovery>
        <thymeleaf-extras-springsecurity4.version>2.1.3.RELEASE</thymeleaf-extras-springsecurity4.version>

        <!--插件版本-->
        <spring.boot.maven.plugin.version>2.2.6.RELEASE</spring.boot.maven.plugin.version>
        <maven.jar.plugin.version>3.2.0</maven.jar.plugin.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
    </properties>


    <dependencies>

    </dependencies>

    <!-- 依赖管理 -->
    <dependencyManagement>

        <dependencies>

            <!--......................................................................................................-->
            <!--............................................依赖版本控制.................................................-->
            <!--.............................................................. .......................................-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.dependencies.version}</version>
                <!-- 依赖的类型, 对应于项目坐标定义的 packaging -->
                <type>pom</type>
                <!-- 依赖的范围 -->
                <!-- compile - 编译依赖范围, 默认的范围, 对于编译, 测试, 运行三种 classpath 都有效 -->
                <!-- test - 测试依赖范围, 之对于测试 classpath 有效 -->
                <!-- provided - 已提供依赖范围, 使用此依赖范围的 maven, 对于编译和测试的 classpath 有效 (servlet-api) -->
                <!-- runtime - 运行时依赖范围, 对于测试和运行时有效, 但在编译主代码时无效 (JDBC驱动包) -->
                <!-- system - 系统依赖范围, 与三种 classpath 的关系与 provided 完全一致, 使用这个范围必须通过 systemPath 元素显式的指定依赖的文件路径, 这类依赖不是通过 maven 仓库解析的 -->
                <!-- import - 导入依赖范围, 该依赖范围不会与三种 classpath 产生实际的影响 -->
                <scope>import</scope>
                <!-- 可选依赖的标签, 如果为 true, 那么依赖不会得以传递, 只能显式的引入这个依赖 -->
                <!--<optional>false</optional>-->
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--springboot-web 依赖-->
            <!--spring-boot-start-logging依赖slf4j和logback-->
            <!--Spring Boot 为 Spring MVC 提供了自动配置，并在 Spring MVC 默认功能的基础上添加了以下特性：-->
            <!--引入了 ContentNegotiatingViewResolver 和 BeanNameViewResolver（视图解析器）-->
            <!--对包括 WebJars 在内的静态资源的支持-->
            <!--自动注册 Converter、GenericConverter 和 Formatter （转换器和格式化器）-->
            <!--对 HttpMessageConverters 的支持（Spring MVC 中用于转换 HTTP 请求和响应的消息转换器）-->
            <!--自动注册 MessageCodesResolver（用于定义错误代码生成规则）-->
            <!--支持对静态首页（index.html）的访问-->
            <!--自动使用 ConfigurableWebBindingInitializer-->


            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-to-slf4j</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>ch.qos.logback</groupId>
                        <artifactId>logback-classic</artifactId>
                    </exclusion>
                </exclusions>
                <version>${spring.boot.starter.version}</version>
            </dependency>

            <!--......................................................................................................-->
            <!--...............................................框架....................................................-->
            <!--......................................................................................................-->
            <!--dubbo-->
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo-spring-boot-starter</artifactId>
                <version>${apache.dubbo.springboot.starter.version}</version>
            </dependency>
            <!--Curator是Netflix公司开源的一套zookeeper客户端框架，解决了很多Zookeeper客户端非常底层的细节开发工作，包括连接重连、反复注册Watcher和NodeExistsException异常等等。-->
            <!--1.curator-framework对zookeeper的底层api的一些封装-->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${apache.curator.framework.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!--2.curator-recipes封装了一些高级特性，如：Cache事件监听、选举、分布式锁、分布式Barrier-->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${apache.curator.recipes.version}</version>
            </dependency>
            <!--3.curator-x-discovery是一个服务发现的解决方案。-->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-x-discovery</artifactId>
                <version>${apache.curator.x.discovery}</version>
            </dependency>
            <!-- 通用Mapper(包含了mybatis和mybatis spring两个包) -->
            <!--https://mapperhelper.github.io/docs/-->
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper-spring-boot-starter</artifactId>
                <version>${mapper.spring.boot.starter.version}</version>
            </dependency>
            <!--mybatis 的入门依赖-->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis.spring.verison}</version>
            </dependency>
            <!--Spring版本的PageHelper分页插件-->
            <!--使用这个依赖，springboot会自动装配，不需要再配置文件配置也可以使用-->
            <!--使用tkmybatis包含了mybatis和mybatis spring两个包，这里移除-->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.spring.boot.starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>
            <!-- security 整合 thymeleaf -->
            <dependency>
                <groupId>org.thymeleaf.extras</groupId>
                <artifactId>thymeleaf-extras-springsecurity4</artifactId>
                <version>${thymeleaf-extras-springsecurity4.version}</version>
            </dependency>
            <!-- JPA规范包 -->
            <dependency>
                <groupId>javax.persistence</groupId>
                <artifactId>persistence-api</artifactId>
                <version>${jpa.version}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--...............................................组件包...................................................-->
            <!--......................................................................................................-->
            <!-- redisson. 这里使用的版本是 3.13.6, 没找到与 2.3.1.RELEASE 匹配的 redisson starter -->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>${redisson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson-spring-boot-starter</artifactId>
                <version>${redisson.spring.boot.starter.verison}</version>
            </dependency>
            <!--oracle的驱动包-->
            <dependency>
                <groupId>com.oracle.database.jdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>${ojdbc8.version}</version>
            </dependency>
            <!--解决springboot连接oracle的报错(不支持的字符集 (在类路径中添加 orai18n.jar):ZHS16GBK)-->
            <dependency>
                <groupId>com.oracle.database.nls</groupId>
                <artifactId>orai18n</artifactId>
                <version>${orai18n.version}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--...............................................工具包....................................................-->
            <!--......................................................................................................-->
            <!--Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。-->
            <!--Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。-->
            <!--Fastjson 源码地址：https://github.com/alibaba/fastjson-->
            <!--Fastjson 中文 Wiki：https://github.com/alibaba/fastjson/wiki/Quick-Start-CN-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${alibaba.fastjson.version}</version>
            </dependency>
            <!--google提供的工具包-->
            <!-- 集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等 -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <!--poi工具包（apache用于处理文档的工具包）-->
            <!--<dependency>-->
            <!--    <groupId>org.apache.poi</groupId>-->
            <!--    <artifactId>poi</artifactId>-->
            <!--    <version>${apache.poi.version}</version>-->
            <!--</dependency>-->
            <!--用于 Microsoft Documents 的 Java API-->
            <!--解决xlsx的文件(包含了org.apache.poi工具包)-->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${apache.poi.ooxml.version}</version>
            </dependency>
            <!--Apache Commons IO is a library of utilities to assist with developing IO functionality(用于帮助开发IO功能).-->
            <!--官网：https://commons.apache.org/proper/commons-io/-->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons.io.version}</version>
            </dependency>
            <!--Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。-->
            <!--https://gitee.com/dromara/hutool-->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-core</artifactId>
                <version>${hutool.core.version}</version>
            </dependency>
            <!--MyBatis Generator （MBG） 是 MyBatis MyBatis 的代码生成器。-->
            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-core</artifactId>
                <version>${mybatis.generator.core.version}</version>
            </dependency>
            <!--CGLIB是一个强大的、高性能的代码生成库。其被广泛应用于AOP框架（Spring、dynaop）中，用以提供方法拦截操作。-->
            <!--Hibernate作为一个比较受欢迎的ORM框架，同样使用CGLIB来代理单端（多对一和一对一）关联（延迟提取集合使用的另一种机制）。-->
            <!--CGLIB作为一个开源项目，其代码托管在github，地址为：https://github.com/cglib/cglib-->
            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>${cglib.version}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--...............................................插件....................................................-->
            <!--......................................................................................................-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.maven.plugin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.plugin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <!--defines the project build.-->
    <build>
        <!--parent element for one or more <plugin> elements.-->
        <plugins>

            <!--
            the plugin to configure.
            <plugin>

                coordinates of the plugin to configure.
                <groupId>...</groupId>
                <artifactId>...</artifactId>
                <version>...</version>

                holds the parameters and properties to be passed to the plugin.保存要传递给插件的参数和属性。
                <configuration>...</configuration>

                parent element for one or more <execution> element.
                <executions>

                    configures the execution of a goal of the plugin.配置插件目标的执行。
                    <execution>...</execution>
                </executions>
            </plugin>
            -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.maven.plugin.version}</version>
            </plugin>

        </plugins>
    </build>


</project>