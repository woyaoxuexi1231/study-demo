<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dependencies-parent</artifactId>
        <groupId>org.hulei</groupId>
        <version>1.0.0.4-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>spring-boot</artifactId>

    <properties>
        <build.finalName>spring-boot</build.finalName>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <dependencies>

        <!-- 内部 -->
        <dependency>
            <groupId>org.hulei</groupId>
            <artifactId>core</artifactId>
            <version>1.0.0.4-SNAPSHOT</version>
        </dependency>
        <!-- 一个starter小测试包 -->
        <dependency>
            <groupId>org.hulei</groupId>
            <artifactId>common-starter</artifactId>
            <version>1.0.0.4-SNAPSHOT</version>
        </dependency>
        <!-- curator工具的starter测试包 -->
<!--         <dependency> -->
<!--             <groupId>org.hulei</groupId> -->
<!--             <artifactId>curator-starter</artifactId> -->
<!--             <version>1.0.0.4-SNAPSHOT</version> -->
<!--         </dependency> -->
        <!-- 自定义的mapper的统一输出包 -->
        <dependency>
            <groupId>org.hulei</groupId>
            <artifactId>mapperplus</artifactId>
            <version>1.0.0.4-SNAPSHOT</version>
        </dependency>
        <!-- 多数据源的stater包 -->
        <dependency>
            <groupId>org.hulei</groupId>
            <artifactId>spring-routing-datasource</artifactId>
            <version>1.0.0.4-SNAPSHOT</version>
        </dependency>

        <!-- 一些工具包 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>

        <!--自动配置-->
        <!-- springbootweb框架,同时默认嵌入了Tomcat -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- Thymeleaf 和 Thymeleaf 布局方言 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- spring缓存用到了 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
        </dependency>
        <!--
        `spring-boot-starter-actuator` 是 Spring Boot 的一个启动器（starter）依赖，其设计初衷是为了让开发者能够方便快捷地获取应用程序的运行时信息和健康状况，无需编写额外的监控和管理代码。这个库提供了一系列的预设端点（endpoints），通过这些端点，可以访问应用程序的内部信息，比如运行状况（health）、指标信息（metrics）、环境属性（env）等。

        出现契机：
        - **提高可观察性**：在现代应用的开发过程中，理解应用的运行状况、性能指标和各项资源的使用情况变得至关重要。随着微服务架构的流行，单个应用可能被拆分成多个服务，这使得监控单个服务的性能和健康状态成为一项挑战。`spring-boot-starter-actuator` 被设计来简化这一过程，通过暴露端点来帮助开发者和运维人员监控和管理应用。
        - **简化运维任务**：在没有合适工具的情况下，维护和监测应用可能需要编写大量定制代码。`spring-boot-starter-actuator` 提供了一个简单而强大的方式来进行操作，比如实时检查应用的健康状况，查看应用的配置信息，实时访问日志级别等，无需登录服务器或直接访问数据库。
        - **增强微服务架构支持**：在微服务架构中，管理和监控数十或数百个服务可能非常复杂。Actuator提供的端点可以轻松集成到微服务监控工具中，如Prometheus、Grafana等，这使得集中监控变得容易。

        解决问题：
        - **透明度**：提供应用程序运行时的详细视图，帮助开发者了解应用的内部状态。
        - **诊断能力**：通过提供详细的健康指标和信息，帮助开发者快速定位问题所在。
        - **减少开发负担**：避免开发者需要自行实现监控和管理功能，提高开发效率。
        - **易于集成**：Actuator 端点容易与现有的监控系统集成，提供实时监控和警报功能。

        总之，`spring-boot-starter-actuator` 是一个非常强大的工具，它通过提供丰富的运行时信息和管理功能，帮助开发者更好地管理和监控他们的应用程序。
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--
         顾名思义，DevTools 为 Spring 开发人员提供了一些方便的开发同步工具。这些是：
        1. 当代码更改时自动重启应用程序
        2. 当以浏览器为目标的资源（如模板、JavaScript、样式表等）发生变化时，浏览器会自动刷新
        3. 自动禁用模板缓存
        4. 如果 H2 数据库正在使用，则在 H2 控制台中构建
        当 DevTools 起作用时，它会自动启用 LiveReload （http://livereload.com/）服务器和应用程序
        LiveReload 有针对 Google Chrome、Safari 和 Firefox 浏览器的插件, 但是没有 edge 。请访问 http://livereload.com/extensions/，了解如何为浏览器安装 LiveReload。

        当前使用 2024.2.2 在开启热部署的情况下,需要进行 ctrl + F9 的手动构建才能刷新项目
         -->
<!--         <dependency> -->
<!--             <groupId>org.springframework.boot</groupId> -->
<!--             <artifactId>spring-boot-devtools</artifactId> -->
<!--             &lt;!&ndash; 只在运行时需要,且依赖不传递 &ndash;&gt; -->
<!--             <scope>runtime</scope> -->
<!--         </dependency> -->


        <!-- 数据库驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.nls</groupId>
            <artifactId>orai18n</artifactId>
        </dependency>

        <!-- mybatis+pagehelper -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>


        <!-- 开源的xml解析包 -->
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>1.6.1</version>
        </dependency>
        <!-- 开源的excel解析工具 -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
        </dependency>

        <!-- mock数据生成包 -->
        <dependency>
            <groupId>com.github.jsonzou</groupId>
            <artifactId>jmockdata</artifactId>
            <version>4.2.0</version>
        </dependency>

        <!-- 三方的UUID生成工具 -->
        <dependency>
            <groupId>com.github.f4b6a3</groupId>
            <artifactId>uuid-creator</artifactId>
            <version>5.2.0</version>
        </dependency>


        <!--测试-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <!--默认激活状态-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <finalName>${project.name}</finalName>
                <plugins>
                    <plugin>
                        <!--
                        使用 2.2.6.RELEASE 版本 spring-boot-maven-plugin 进行打包的时候我发现 jsp 即使被打进包里也访问不了
                        使用 1.4.2.RELEASE 版本的也不行
                        打出来的包启动会报错
                        Failed to scan [jar:file:/C:/Project/study-demo/demo-spring/demo-springboot/target/demo-springboot.jar!/BOOT-INF/lib/spring-webmvc-5.2.7.RELEASE.jar!/] from classloader hierarchy
                        Caused by: java.lang.IllegalStateException: Not a file URL
                        Failed to scan [jar:file:/C:/Project/study-demo/demo-spring/demo-springboot/target/demo-springboot.jar!/BOOT-INF/lib/jstl-1.2.jar!/] from classloader hierarchy
                        Caused by: java.lang.IllegalStateException: Not a file URL
                        这两个日志是 WARN 级别的, 不知道是什么原因
                        -->
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <!--使得打出的包是可执行的-->
                            <executable>true</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <!--
                                    build-image:Package an application into a OCI image using a buildpack.
                                    build-info:Generate a file based the content of the current .build-info.propertiesMavenProject
                                    help:Display help information on spring-boot-maven-plugin. Call to display parameter details.mvn spring-boot:help -Ddetail=true -Dgoal=<goal-name>
                                    * repackage:Repackage existing JAR and WAR archives so that they can be executed from the command line using . With can also be used simply to package a JAR with nested dependencies (and no main class, so not executable).java -jarlayout=NONE
                                    run:Run an application in place.
                                    start:Start a spring application. Contrary to the goal, this does not block and allows other goals to operate on the application. This goal is typically used in integration test scenario where the application is started before a test suite and stopped after.run
                                    stop:Stop an application that has been started by the "start" goal. Typically invoked once a test suite has completed.
                                    -->
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <includes>
                            <include>**/**</include>
                        </includes>
                    </resource>
                    <resource>
                        <directory>src/main/webapp</directory>
                        <includes>
                            <include>**/**</include>
                        </includes>
                        <filtering>false</filtering>
                        <!--                        <targetPath>META-INF/resource</targetPath>-->
                    </resource>
                </resources>
            </build>
        </profile>
        <profile>
            <id>pro</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <finalName>${project.name}</finalName>
                <resources>
                    <resource>
                        <filtering>false</filtering>
                        <directory>src/main/resources</directory>
                        <excludes>
                            <exclude>
                                **/*.properties
                            </exclude>
                        </excludes>
                    </resource>
                </resources>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <!--使打的包是可执行的-->
                            <executable>true</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
