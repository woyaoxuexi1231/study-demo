<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.hulei</groupId>
    <version>1.0.0.4-SNAPSHOT</version>
    <packaging>pom</packaging>
    <artifactId>dependencies-springcloud-hoxton</artifactId>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <spring.boot.dependencies.version>2.3.12.RELEASE</spring.boot.dependencies.version>
        <spring.cloud.dependencies.version>Hoxton.SR12</spring.cloud.dependencies.version>

        <spring-cloud-alibaba-dependencies.version>2021.1</spring-cloud-alibaba-dependencies.version>
        <!-- spring admin -->
        <spring-boot-admin-starter-server.version>3.2.3</spring-boot-admin-starter-server.version>

        <!-- dubbo -->
        <apache.dubbo.springboot.starter.version>3.2.7</apache.dubbo.springboot.starter.version>

        <!-- 某些springcloud依赖 -->
        <spring-cloud-starter-eureka.version>1.4.7.RELEASE</spring-cloud-starter-eureka.version>
        <spring-cloud-starter-security.version>2.2.5.RELEASE</spring-cloud-starter-security.version>

        <!-- 数据库相关 -->
        <mysql-connector-java.version>8.0.33</mysql-connector-java.version>
        <ojdbc8.version>21.3.0.0</ojdbc8.version>
        <orai18n.version>21.3.0.0</orai18n.version>
        <!-- <redisson.version>3.12.4</redisson.version> -->
        <!-- Redisson 在 3.13.0 and 3.19.0 更换了默认的协议，会报错Unsupported protocol version 118 -->
        <!-- <redisson.spring.boot.starter.verison>3.12.4</redisson.spring.boot.starter.verison> -->
        <redisson.spring.boot.starter.verison>3.29.0</redisson.spring.boot.starter.verison>


        <!-- Mybatis框架 -->
        <!-- mybatis 核心包 -->
        <mybatis.version>3.5.16</mybatis.version>
        <!-- mybatis 整合spring需要的包 -->
        <mybatis-spring.version>2.1.2</mybatis-spring.version>
        <!-- mybatis 整合springboot的依赖包 -->
        <mybatis-spring-boot-starter.version>3.0.3</mybatis-spring-boot-starter.version>

        <!-- mybatis的增强 -->
        <!-- mybatis-plus -->
        <mybatis.plus.boot.starter.version>3.5.9</mybatis.plus.boot.starter.version>
        <!-- tkmybatis -->
        <mapper.spring.boot.starter.version>5.0.1</mapper.spring.boot.starter.version>

        <!-- 分页插件 -->
        <pagehelper.version>6.1.0</pagehelper.version>
        <pagehelper.spring.boot.starter.version>2.1.0</pagehelper.spring.boot.starter.version>
        <!-- mybatis生成器 -->
        <mybatis.generator.core.version>1.3.2</mybatis.generator.core.version>


        <!-- curator -->
        <zookeeper.version>3.4.8</zookeeper.version>
        <apache.curator.x.discovery>2.13.0</apache.curator.x.discovery>
        <apache.curator.client.version>2.13.0</apache.curator.client.version>
        <apache.curator.framework.version>2.13.0</apache.curator.framework.version>
        <apache.curator.recipes.version>2.13.0</apache.curator.recipes.version>

        <!--一些工具组件-->
        <hutool.core.version>5.6.1</hutool.core.version>
        <guava.version>21.0</guava.version>
        <cglib.version>3.2.10</cglib.version>
        <javax.servlet.jsp.version>2.2.1</javax.servlet.jsp.version>
        <apache.poi.ooxml.version>5.2.5</apache.poi.ooxml.version>
        <apache.poi.version>5.2.5</apache.poi.version>
        <commons.io.version>2.6</commons.io.version>
        <alibaba.fastjson.version>2.0.31</alibaba.fastjson.version>
        <!-- 这个依赖spring已经有了 -->
        <!-- <gson.version>2.10.1</gson.version>  -->
        <!-- Thymeleaf 模板引擎的一个扩展模块，用于集成 Spring Security 和 Thymeleaf -->
        <thymeleaf-extras-springsecurity4.version>3.0.5.RELEASE</thymeleaf-extras-springsecurity4.version>
        <!-- grpc框架 -->
        <grpc-spring-boot-starter.version>4.0.0</grpc-spring-boot-starter.version>


        <!--插件版本-->
        <spring.boot.maven.plugin.version>2.5.15</spring.boot.maven.plugin.version>
        <maven.jar.plugin.version>3.2.0</maven.jar.plugin.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-logging</artifactId>
                <version>${spring.boot.dependencies.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-to-slf4j</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>ch.qos.logback</groupId>
                        <artifactId>logback-classic</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- Spring Cloud Starter Eureka (deprecated, please use spring-cloud-starter-netflix-eureka-client -->
            <!-- 已经不再推荐使用,推荐使用spring-cloud-starter-netflix-eureka-client作为服务发现者的依赖 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-eureka</artifactId>
                <version>1.4.7.RELEASE</version>
            </dependency>
            <!-- Spring Cloud Starter Feign (deprecated, please use spring-cloud-starter-openfeign) -->
            <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-feign -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-feign</artifactId>
                <version>1.4.7.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-security</artifactId>
                <version>2.2.5.RELEASE</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>


            <!--             <dependency> -->
            <!--                 <groupId>org.springframework.cloud</groupId> -->
            <!--                 <artifactId>spring-cloud-starter-bootstrap</artifactId> -->
            <!--                 <version>4.0.0</version> -->
            <!--             </dependency> -->

            <!--......................................................................................................-->
            <!--.........................................各厂商提供的JDBC驱动............................................-->
            <!--......................................................................................................-->
            <!--oracle的驱动包-->
            <dependency>
                <groupId>com.oracle.database.jdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>${ojdbc8.version}</version>
            </dependency>
            <!--解决springboot连接oracle的报错(不支持的字符集 (在类路径中添加 orai18n.jar):ZHS16GBK)-->
            <dependency>
                <groupId>com.oracle.database.nls</groupId>
                <artifactId>orai18n</artifactId>
                <version>${orai18n.version}</version>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector-java.version}</version>
            </dependency>


            <!-- https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-starter-server -->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>${spring-boot-admin-starter-server.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>${spring-boot-admin-starter-server.version}</version>
            </dependency>


            <!--                                              其他开源框架                                              -->
            <!--......................................................................................................-->
            <!--...............................................DUBBO..................................................-->
            <!--......................................................................................................-->
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo-spring-boot-starter</artifactId>
                <version>${apache.dubbo.springboot.starter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.dubbo.extensions</groupId>
                <artifactId>dubbo-mock-admin</artifactId>
                <version>3.0.0</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-registry-nacos -->
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo-registry-nacos</artifactId>
                <version>${apache.dubbo.springboot.starter.version}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--...............................................curator................................................-->
            <!--......................................................................................................-->
            <!--Curator是Netflix公司开源的一套zookeeper客户端框架，解决了很多Zookeeper客户端非常底层的细节开发工作，包括连接重连、反复注册Watcher和NodeExistsException异常等等。-->
            <!--1.curator-framework对zookeeper的底层api的一些封装-->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${apache.curator.framework.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!--2.curator-recipes封装了一些高级特性，如：Cache事件监听、选举、分布式锁、分布式Barrier-->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${apache.curator.recipes.version}</version>
            </dependency>
            <!--3.curator-x-discovery是一个服务发现的解决方案。-->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-x-discovery</artifactId>
                <version>${apache.curator.x.discovery}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-client</artifactId>
                <version>${apache.curator.client.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.zookeeper</groupId>
                <artifactId>zookeeper</artifactId>
                <version>${zookeeper.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>


            <!--.........................................................................................................................-->
            <!--.........................................................ORM框架......................................................-->
            <!--................................................................................. .......................................-->
            <!-- 通用Mapper, JPA标准(包含了mybatis和mybatis spring两个包) -->
            <!-- https://mapperhelper.github.io/docs/ -->
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper-spring-boot-starter</artifactId>
                <version>${mapper.spring.boot.starter.version}</version>
            </dependency>

            <!-- Mybatis -->
            <!-- mybatis的基础依赖 -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <!-- Mybatis 整合 Spring 提供的 Spring 的包 -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis-spring.version}</version>
            </dependency>
            <!-- 由于 springboot 的出现, 自动配置成为主流, 相应的 mybatis 也推出了 springboot 相关的依赖, 虽然 groupId 不同, 但是这个项目依旧是 MyBatis 这个开源组织提供的 -->
            <!-- https://github.com/mybatis/spring-boot-starter -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis-spring-boot-starter.version}</version>
            </dependency>

            <!-- mybatis plus -->
            <!-- mybatisplus的基础依赖 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus</artifactId>
                <version>${mybatis.plus.boot.starter.version}</version>
            </dependency>
            <!-- mybatisplus整合Spring的起步依赖 -->
            <!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis.plus.boot.starter.version}</version>
            </dependency>


            <!-- Mybatis的分页插件 PageHelper, 国产的开源项目 -->
            <!-- https://github.com/pagehelper/Mybatis-PageHelper -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.spring.boot.starter.version}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--..............................................redisson................................................-->
            <!--......................................................................................................-->
            <!-- redisson. 这里使用的版本是 3.13.6, 没找到与 2.7.16 匹配的 redisson starter -->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>${redisson.spring.boot.starter.verison}</version>
            </dependency>
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson-spring-boot-starter</artifactId>
                <version>${redisson.spring.boot.starter.verison}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--...............................................es...................................................-->
            <!--......................................................................................................-->
            <!--             <dependency> -->
            <!--                 <groupId>co.elastic.clients</groupId> -->
            <!--                 <artifactId>elasticsearch-java</artifactId> -->
            <!--                 <version>${elasticsearch-java.version}</version> -->
            <!--             </dependency> -->
            <!--             <dependency> -->
            <!--                 <groupId>org.elasticsearch.client</groupId> -->
            <!--                 <artifactId>elasticsearch-rest-client</artifactId> -->
            <!--                 <version>${elasticsearch-rest-client.version}</version> -->
            <!--             </dependency> -->
            <!--             <dependency> -->
            <!--                 <groupId>com.fasterxml.jackson.core</groupId> -->
            <!--                 <artifactId>jackson-databind</artifactId> -->
            <!--                 <version>${jackson-databind.version}</version> -->
            <!--             </dependency> -->
            <!--             <dependency> -->
            <!--                 <groupId>jakarta.json</groupId> -->
            <!--                 <artifactId>jakarta.json-api</artifactId> -->
            <!--                 <version>${jakarta.json-api.version}</version> -->
            <!--             </dependency> -->


            <!--......................................................................................................-->
            <!--...............................................模板语言.................................................-->
            <!--......................................................................................................-->
            <!-- security 整合 thymeleaf -->
            <dependency>
                <groupId>org.thymeleaf.extras</groupId>
                <artifactId>thymeleaf-extras-springsecurity4</artifactId>
                <version>${thymeleaf-extras-springsecurity4.version}</version>
            </dependency>


            <!--......................................................................................................-->
            <!--...............................................工具包....................................................-->
            <!--......................................................................................................-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.34</version>
            </dependency>
            <!--Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。-->
            <!--Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。-->
            <!--Fastjson 源码地址：https://github.com/alibaba/fastjson-->
            <!--Fastjson 中文 Wiki：https://github.com/alibaba/fastjson/wiki/Quick-Start-CN-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${alibaba.fastjson.version}</version>
            </dependency>
            <!--google提供的工具包-->
            <!-- 集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等 -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <!--poi工具包（apache用于处理文档的工具包）-->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${apache.poi.version}</version>
            </dependency>
            <!--用于 Microsoft Documents 的 Java API-->
            <!--解决xlsx的文件(包含了org.apache.poi工具包)-->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${apache.poi.ooxml.version}</version>
            </dependency>
            <!--Apache Commons IO is a library of utilities to assist with developing IO functionality(用于帮助开发IO功能).-->
            <!--官网：https://commons.apache.org/proper/commons-io/-->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons.io.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.17.0</version>
            </dependency>
            <!--Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。-->
            <!--https://gitee.com/dromara/hutool-->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-core</artifactId>
                <version>${hutool.core.version}</version>
            </dependency>
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>5.8.33</version>
            </dependency>

            <!--MyBatis Generator （MBG） 是 MyBatis MyBatis 的代码生成器。-->
            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-core</artifactId>
                <version>${mybatis.generator.core.version}</version>
            </dependency>
            <!--CGLIB是一个强大的、高性能的代码生成库。其被广泛应用于AOP框架（Spring、dynaop）中，用以提供方法拦截操作。-->
            <!--Hibernate作为一个比较受欢迎的ORM框架，同样使用CGLIB来代理单端（多对一和一对一）关联（延迟提取集合使用的另一种机制）。-->
            <!--CGLIB作为一个开源项目，其代码托管在github，地址为：https://github.com/cglib/cglib-->
            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>${cglib.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
            <!-- <dependency> -->
            <!--     <groupId>com.google.code.gson</groupId> -->
            <!--     <artifactId>gson</artifactId> -->
            <!--     <version>${gson.version}</version> -->
            <!-- </dependency> -->
            <!-- https://mvnrepository.com/artifact/io.github.lognet/grpc-spring-boot-starter -->
            <dependency>
                <groupId>io.github.lognet</groupId>
                <artifactId>grpc-spring-boot-starter</artifactId>
                <version>${grpc-spring-boot-starter.version}</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-exec -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-exec</artifactId>
                <version>1.4.0</version>
            </dependency>

        </dependencies>
    </dependencyManagement>


    <!--defines the project build.-->
    <build>


        <!-- maven的一些常见的生命周期如下: -->
        <!--
            validate - 验证项目是否正确、所有必要的信息是否可用。
            initialize - 初始化构建状态，比如设置属性。
            generate-sources - 生成任何所需的源代码。
            process-sources - 处理项目的源代码，例如过滤。
            generate-resources - 生成任何所需的资源。
            process-resources - 复制和处理资源到目标目录，准备打包。
            compile - 编译项目的源代码。
            process-classes - 对已编译的类文件进行处理，例如字节码增强。
            generate-test-sources - 生成任何所需的测试源代码。
            process-test-sources - 处理测试源代码。
            generate-test-resources - 生成任何所需的测试资源。
            process-test-resources - 复制和处理测试资源到目标目录。
            test-compile - 编译测试源代码。
            process-test-classes - 处理已编译的测试类文件。
            test - 使用适当的单元测试框架运行测试。
            prepare-package - 执行任何需要在包之前准备工作的任务。
            package - 接受编译好的代码并将其打包成可分发的格式，如 JAR 或 WAR。
            pre-integration-test - 执行集成测试前所需的操作。
            integration-test - 如有必要，处理并部署包到集成测试环境中。
            post-integration-test - 执行集成测试后所需的操作。
            verify - 运行任何检查以验证包是否有效且符合质量标准。
            install - 将包安装到本地 Maven 仓库中，这样可以在其他本地项目中使用。
            deploy - 将最终的包复制到远程仓库以便与其他开发人员和项目共享。
         -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>2.5.15</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.4.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>1.1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>

                <!-- https://www.jianshu.com/p/0895de58c524 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>
                <!--
                 将项目中的依赖项,模块,文档和其他任意文件一起组装成一个可分发的归档文件
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>

                <!--
                exec-maven-plugin这个是什么插件
                exec-maven-plugin 是一个 Maven 插件，用于在 Maven 生命周期的任何阶段执行外部命令或脚本。
                它可以用于执行任何可在命令行上运行的程序，包括 shell 脚本、Python 脚本、Java 程序等。

                这个插件非常灵活，可以用于自动化各种构建和部署任务。例如，你可以在编译过程中运行一些检查工具，或者在打包阶段执行一些脚本来准备部署环境。
                 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.5.0</version>
                </plugin>

                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>1.4.13</version>
                </plugin>

                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>1.15.1</version>
                </plugin>

            </plugins>
        </pluginManagement>


        <!--parent element for one or more <plugin> elements.-->
        <plugins>

            <!--
            the plugin to configure.
            <plugin>

                coordinates of the plugin to configure.
                <groupId>...</groupId>
                <artifactId>...</artifactId>
                <version>...</version>

                holds the parameters and properties to be passed to the plugin.保存要传递给插件的参数和属性。
                <configuration>...</configuration>

                parent element for one or more <execution> element.
                <executions>

                    configures the execution of a goal of the plugin.配置插件目标的执行。
                    <execution>...</execution>
                </executions>
            </plugin>
            -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <!--  prepare发布之前执行的mvn命令   -->
                    <preparationGoals>clean verify</preparationGoals>
                    <!--  生成的tag格式  这里 @{} 而不是 ${} 可以防止project.version被其他方式覆盖 -->
                    <tagNameFormat>release-@{project.version}</tagNameFormat>
                    <!--   手动push -->
                    <pushChanges>false</pushChanges>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>