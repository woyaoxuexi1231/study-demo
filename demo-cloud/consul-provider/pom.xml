<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dependencies-parent</artifactId>
        <groupId>org.hulei</groupId>
        <version>1.0.0.4-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>consul-provider</artifactId>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- 内部 -->
        <dependency>
            <groupId>org.hulei</groupId>
            <artifactId>common-starter</artifactId>
            <version>1.0.0.4-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- consul服务注册和发现 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-discovery</artifactId>
        </dependency>
        <!-- consul服务配置中心 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-config</artifactId>
        </dependency>

        <!--
         Spring Boot Actuator提供了一组用于监控和管理Spring Boot应用程序的生产就绪功能。通过Actuator，您可以轻松地监控应用程序的运行状况、收集应用程序的指标和统计信息，并提供一些管理端点来管理应用程序。以下是Spring Boot Actuator的一些主要功能和用途：
        1. **健康检查（Health Check）**：Actuator提供了一个健康检查端点，用于检查应用程序的健康状态。这个端点通常用于应用程序的负载均衡和自动化部署，以确保只有在应用程序处于健康状态时才会接收流量。
        2. **监控端点（Metrics Endpoints）**：Actuator提供了一组监控端点，用于收集应用程序的指标和统计信息，例如内存使用情况、线程池情况、HTTP请求计数等。这些端点对于应用程序性能分析和故障排除非常有用。
        3. **应用信息端点（Application Information Endpoints）**：Actuator提供了一些端点，用于获取应用程序的基本信息，例如应用程序的名称、版本、环境变量等。这些信息对于应用程序的管理和监控非常有用。
        4. **环境信息端点（Environment Information Endpoints）**：Actuator提供了一些端点，用于获取应用程序的环境信息，例如配置属性、系统属性等。这些信息对于应用程序的配置管理和问题诊断非常有用。
        5. **日志配置端点（Logging Configuration Endpoints）**：Actuator提供了一些端点，用于获取和修改应用程序的日志配置，例如日志级别、日志文件位置等。这些端点对于调试和故障排除非常有用。
        总的来说，Spring Boot Actuator可以帮助您更好地监控、管理和调试您的Spring Boot应用程序，提高应用程序的可用性和稳定性，以及缩短故障排除的时间。
         -->
        <!-- 解决在consul注册中心报错HTTP GET http://DESKTOP-SFJ85U4:9141/actuator/health: 404  Output: <html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id='created'>Sun Apr 14 15:58:04 CST 2024</div><div>There was an unexpected error (type=Not Found, status=404).</div></body></html> -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <!--默认激活状态-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <finalName>${project.name}</finalName>
                <plugins>
                    <plugin>
                        <!--
                        使用 2.2.6.RELEASE 版本 spring-boot-maven-plugin 进行打包的时候我发现 jsp 即使被打进包里也访问不了
                        使用 1.4.2.RELEASE 版本的也不行
                        打出来的包启动会报错
                        Failed to scan [jar:file:/C:/Project/study-demo/demo-spring/demo-springboot/target/demo-springboot.jar!/BOOT-INF/lib/spring-webmvc-5.2.7.RELEASE.jar!/] from classloader hierarchy
                        Caused by: java.lang.IllegalStateException: Not a file URL
                        Failed to scan [jar:file:/C:/Project/study-demo/demo-spring/demo-springboot/target/demo-springboot.jar!/BOOT-INF/lib/jstl-1.2.jar!/] from classloader hierarchy
                        Caused by: java.lang.IllegalStateException: Not a file URL
                        这两个日志是 WARN 级别的, 不知道是什么原因
                        -->
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <!--使得打出的包是可执行的-->
                            <executable>true</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <!--
                                    build-image:Package an application into a OCI image using a buildpack.
                                    build-info:Generate a file based the content of the current .build-info.propertiesMavenProject
                                    help:Display help information on spring-boot-maven-plugin. Call to display parameter details.mvn spring-boot:help -Ddetail=true -Dgoal=<goal-name>
                                    * repackage:Repackage existing JAR and WAR archives so that they can be executed from the command line using . With can also be used simply to package a JAR with nested dependencies (and no main class, so not executable).java -jarlayout=NONE
                                    run:Run an application in place.
                                    start:Start a spring application. Contrary to the goal, this does not block and allows other goals to operate on the application. This goal is typically used in integration test scenario where the application is started before a test suite and stopped after.run
                                    stop:Stop an application that has been started by the "start" goal. Typically invoked once a test suite has completed.
                                    -->
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>pro</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <finalName>${project.name}</finalName>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <configuration>
                            <!--移除properties文件，pro把配置文件放jar包外进行配置-->
                            <excludes>
                                <exclude>
                                    **/*.properties
                                </exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <!--使打的包是可执行的-->
                            <executable>true</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>