<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    <aop:aspectj-autoproxy/>
    <!-- <context:component-scan base-package="com.hundsun.demo.spring"></context:com> -->

    <!-- spring相关的配置信息 -->
    <!-- BeanFactoryPostProcessor -->
    <!-- 配置如果实现IgnoreBean接口,那么这个bean的自动注入将不会生效 -->
    <bean class="com.hundsun.demo.spring.init.processor.IgnoreBeanFactoryPostProcessor"/>
    <bean class="com.hundsun.demo.spring.service.impl.IgnoreBean"/>

    <!-- 当注入MySQLService的实现类的时候,全部改成注入MySQLServiceProxy而不是MySQLServiceImpl -->
    <bean class="com.hundsun.demo.spring.init.processor.ResolvableDependencyPostProcessor"/>
    <bean name="mySQLServiceImpl" class="com.hundsun.demo.java.jdk.pattern.structural.proxy.MySQLServiceImpl"/>
    <bean name="mySQLServiceProxy" class="com.hundsun.demo.java.jdk.pattern.structural.proxy.normal.MySQLServiceProxy">
        <property name="mySqlService" ref="mySQLServiceImpl"/>
    </bean>

    <!-- spring监听机制,由 ApplicationListener + ApplicationEvent 实现 -->
    <bean class="com.hundsun.demo.spring.init.listener.SimpleListener"/>

    <!-- Spring通过三级缓存来解决循环依赖的问题 -->
    <!-- Q1: 不过三级缓存确实可以解决循环依赖的问题, 但是我无法回答的是为什么要用三级缓存, 因为看上去二级缓存就可以解决问题了, 三级缓存似乎有点多余, 它肯定有更多的用途... 2023-2-10 -->
    <!-- A1: 二级缓存确实可以解决循环依赖的问题, 但是如果我们加入 Spring AOP 的话, 二级缓存就无法解决了, 三级缓存解决了代理对象的注入问题 -->
    <bean name="positiveBean" class="com.hundsun.demo.spring.init.circle.PositiveBean">
        <property name="negativeBean" ref="negativeBean"/>
    </bean>
    <bean name="negativeBean" class="com.hundsun.demo.spring.init.circle.NegativeBean">
        <property name="positiveBean" ref="positiveBean"/>
    </bean>
    <bean name="circleBean" class="com.hundsun.demo.spring.init.circle.CircleBean">
        <property name="circleBean" ref="circleBean"/>
    </bean>

    <!-- Spring AOP -->
    <bean class="com.hundsun.demo.commom.core.aop.DoneTimeAspect"/>
    <!-- 用于支持基于注解的 AspectJ 切面编程-->
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator">
        <!-- 配置指示 Spring 使用 CGLIB 来创建代理对象，而不是标准的 Java 接口代理。 -->
        <property name="proxyTargetClass" value="true"/>
    </bean>


    <!-- Spring 多数据源解决方案 -->
    <!-- 先定义三套数据库 -->
    <bean id="masterDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://192.168.80.128:3306/yiibaidb?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <bean id="secondDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://192.168.80.128:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <bean id="thirdDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://192.168.80.128:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <!-- 动态数据源切换 -->
    <bean id="dataSource" class="com.hundsun.demo.spring.jdbc.DynamicDataSource">
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
        <property name="targetDataSources">
            <map key-type="com.hundsun.demo.spring.jdbc.DynamicDataSourceType">
                <entry key="MASTER" value-ref="masterDataSource"/>
                <entry key="SECOND" value-ref="secondDataSource"/>
                <entry key="THIRD" value-ref="thirdDataSource"/>
            </map>
        </property>
    </bean>
    <bean id="multipleDataSourceJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean name="yiibaidbServiceTarget" class="com.hundsun.demo.spring.service.impl.YiibaidbServiceImpl"
          autowire="byName"/>
    <!-- 测试多数据源的监听器 -->
    <bean class="com.hundsun.demo.spring.init.listener.MultipleDataSourceTestListener">
        <property name="yiibaidbService" ref="yiibaidbService"/>
    </bean>

    <!-- Spring 多数据源 + 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="multipleDataSourceTransaction">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
    <bean id="yiibaidbService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="yiibaidbServiceTarget"/>
        <property name="proxyInterfaces" value="com.hundsun.demo.spring.service.YiibaidbService"/>
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

    <!-- Mybatis 事务 -->
    <!-- 数据库连接 -->
    <bean id="singleDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://192.168.80.128:3306/yiibaidb?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="spring-mybatis-config.xml"/>
        <property name="mapperLocations" value="mapper/*.xml"/>
    </bean>
    <!--配置 Mybatis 接口扫描, Mybatis 通过这种方式帮我们把 mapper 接口做成实现类, 并注册成 bean-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hundsun.demo.spring.mybatis"/>
    </bean>
    <bean class="com.hundsun.demo.spring.mybatis.MyBatisTest" autowire="byName"/>
    <!-- mybatis 整合进 spring 之后, 事务的管理权就交给了 spring, 所以如果我们要使用事务, 那就必须按规矩办事, 好好的声明 spring 事务吧! -->
    <bean id="mybatisTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="mybatisTransactionManager">
        <tx:attributes>
            <tx:method name="mybatisSpringTransaction" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>
    <!-- 这里使用面向 aop 的命名空间 -->
    <aop:config>
        <aop:pointcut id="mybatisMethods"
                      expression="execution(* com.hundsun.demo.spring.service.YiibaidbService.mybatisSpringTransaction(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="mybatisMethods"/>
    </aop:config>

</beans>