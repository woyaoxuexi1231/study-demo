<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
    BeanFactoryPostProcessor 存在于容器启动阶段, BeanPostProcessor 存在于对象实例化阶段
    BeanFactoryPostProcessor 是 Spring 的一种扩容机制, 该机制允许我们在容器实例化对象之前, 对注册到容器的BeanDefinition所保存的信息做相应的修改
    BeanPostProcessor 会处理容器内所有符合条件的实例化后的实例对象, 通常的场景是处理标记接口实现类,或者为当前对象提供*代理对象*
    ApplicationContext对应的那些Aware接口实际上就是通过BeanPostProcessor的方式进行处理的。
    当ApplicationContext中每个对象的实例化过程走到BeanPostProcessor前置处理这一步时，
    ApplicationContext容器会检测到之前注册到容器的ApplicationContextAwareProcessor这个BeanPostProcessor的实现类，
    然后就会调用其postProcessBeforeInitialization()方法，检查并设置Aware相关依赖
    -->

    <bean class="com.hundsun.demo.spring.model.IgnoreBean"/>
    <!--测试ignoreDependencyInterface方法-->
    <bean class="com.hundsun.demo.spring.processor.IgnoreBeanFactoryPostProcessor"/>

    <!--测试registerResolvableDependency方法-->
    <bean name="resolvableDependencyA" class="com.hundsun.demo.spring.service.impl.ResolvableDependencyImplA"/>
    <bean name="resolvableDependencyB" class="com.hundsun.demo.spring.service.impl.ResolvableDependencyImplB"/>
    <bean class="com.hundsun.demo.spring.processor.ResolvableDependencyPostProcessor"/>



    <bean name="hiService" class="com.hundsun.demo.spring.service.impl.HiServiceImpl"
          init-method="init"
          destroy-method="destroy" autowire="byType">

    </bean>
    <!--<context:component-scan base-package="com.hundsun.demo.spring"></context:com>-->
</beans>