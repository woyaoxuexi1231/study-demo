<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>spring-cloud-2023Leyton</artifactId>
        <groupId>org.hulei</groupId>
        <version>1.0.0.4-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>config-client</artifactId>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- 使用spring cloud bus来做到实时刷新配置 -->
        <!--
         Spring Cloud Bus 出现的契机主要是为了解决微服务架构中的服务实例需要及时响应配置更改、共享事件等场景的需要。在传统部署模式下，当配置信息改变时，可能需要手动重启服务来加载新的配置，这在动态的云环境和容器化部署中显得不够灵活和高效。

        解决的主要问题包括：
        动态配置更新：结合 Spring Cloud Config 使用时，Spring Cloud Bus 允许配置更新时自动通知服务实例，实现配置的动态刷新，无需重新启动服务。
        事件广播：在微服务架构中，服务实例之间可能需要基于某些事件做出响应或通信。Spring Cloud Bus 提供了一条消息通道，使得事件可以被广播到所有订阅了这些事件的服务实例。
        解耦服务通信：通过使用轻量级消息代理，Spring Cloud Bus 有助于实现服务实例之间的解耦通信，增加系统的灵活性和可扩展性。
         -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <!--默认激活状态-->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <finalName>${project.name}</finalName>
                <plugins>
                    <plugin>
                        <!--
                        使用 2.2.6.RELEASE 版本 spring-boot-maven-plugin 进行打包的时候我发现 jsp 即使被打进包里也访问不了
                        使用 1.4.2.RELEASE 版本的也不行
                        打出来的包启动会报错
                        Failed to scan [jar:file:/C:/Project/study-demo/demo-spring/demo-springboot/target/demo-springboot.jar!/BOOT-INF/lib/spring-webmvc-5.2.7.RELEASE.jar!/] from classloader hierarchy
                        Caused by: java.lang.IllegalStateException: Not a file URL
                        Failed to scan [jar:file:/C:/Project/study-demo/demo-spring/demo-springboot/target/demo-springboot.jar!/BOOT-INF/lib/jstl-1.2.jar!/] from classloader hierarchy
                        Caused by: java.lang.IllegalStateException: Not a file URL
                        这两个日志是 WARN 级别的, 不知道是什么原因
                        -->
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <!--使得打出的包是可执行的-->
                            <executable>true</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <!--
                                    build-image:Package an application into a OCI image using a buildpack.
                                    build-info:Generate a file based the content of the current .build-info.propertiesMavenProject
                                    help:Display help information on spring-boot-maven-plugin. Call to display parameter details.mvn spring-boot:help -Ddetail=true -Dgoal=<goal-name>
                                    * repackage:Repackage existing JAR and WAR archives so that they can be executed from the command line using . With can also be used simply to package a JAR with nested dependencies (and no main class, so not executable).java -jarlayout=NONE
                                    run:Run an application in place.
                                    start:Start a spring application. Contrary to the goal, this does not block and allows other goals to operate on the application. This goal is typically used in integration test scenario where the application is started before a test suite and stopped after.run
                                    stop:Stop an application that has been started by the "start" goal. Typically invoked once a test suite has completed.
                                    -->
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>pro</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <finalName>${project.name}</finalName>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <configuration>
                            <!--移除properties文件，pro把配置文件放jar包外进行配置-->
                            <excludes>
                                <exclude>
                                    **/*.properties
                                </exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <!--使打的包是可执行的-->
                            <executable>true</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>repackage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
