server:
  port: 10017

# eureka注册中心的配置
eureka:
  client:
    service-url:
      defaultZone: http://localhost:10001/eureka/

spring:
  application:
    name: feign-client
#  cloud:
#    discovery:
#      client:
#        # 这里是直接配置了一个简单的服务发现客户端的属性
#        # 主要用于在不使用外部服务注册中心（如Eureka、Consul等）的情况下，手动定义服务实例的列表
#        # 使用feign的话也可以得到这里的服务信息, feign也可以使用url自行配置
#        simple:
#          instances:
#            cloud-client:
#              - uri: http://localhost:12008  # user-service的地址


# 关于feign整合resilience4j做熔断的配置
feign:
  circuitbreaker:
    enabled: true
# resilience4j的配置
resilience4j:
  circuitbreaker:
    instances:
      cloud-client:
        # Resilience4j 会注册一个健康指标，这样可以在监控系统中查看断路器的健康状态。
        # 方便运维人员监控系统健康状况。
        registerHealthIndicator: true
        # 表示滑动窗口的大小是 10。也就是说，断路器会跟踪最近的 10 次调用。
        # 用于计算失败率和成功率。
        slidingWindowSize: 10
        # 意味着在计算失败率之前，至少需要有 5 次调用。这可以避免在调用次数很少时就触发断路器。
        # 提高稳定性，防止偶发错误导致断路器过早开启。
        minimumNumberOfCalls: 5
        # 设置为 50，表示当失败率超过 50% 时，断路器会打开。
        # 定义了触发断路器的失败率阈值。
        failureRateThreshold: 50
        # 表示当断路器打开时，会等待 10 秒后才允许请求再次尝试。这是断路器的冷却时间。
        # 给系统一定的恢复时间，防止频繁的错误请求。
        waitDurationInOpenState: 10000ms
        # 在半打开状态下，允许的请求次数为 3 次。当断路器处于半打开状态时，它会允许有限数量的请求尝试，以检查服务是否恢复。
        # 用于逐步恢复服务，并观察系统是否能够处理请求。
        permittedNumberOfCallsInHalfOpenState: 3



logging:
  level:
    io.github.resilience4j.circuitbreaker: DEBUG
    io.github.resilience4j: DEBUG