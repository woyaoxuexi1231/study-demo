server:
  # 配置中心的端口配置会优于本地的配置
  port: 10016


#============================================== spring cloud 配置 ==============================================#

spring:
  application:
    name: consul-provider
  cloud:
    consul:
      # Consul 服务器的主机名或 IP 地址
      host: 192.168.3.102
      # Consul 服务器的端口号，设置为 8500。
      port: 8500
      discovery:
        # 服务在 Consul 注册中心中的名称，设置为 consul-provider。
        service-name: consul-provider
        # instanceId 是一个可选属性，允许你自定义服务实例的ID。你可以利用Spring表达式语言（SpEL）来构建一个复杂的ID。例如，包括应用IP、应用实例ID和一些随机值。
        instance-id: ${spring.application.name}:${server.port}
        # 定义健康检查的相对路径 以 / 开头的路径 (如 /actuator/health) 当服务使用标准端口和协议时
        # 而 health-check-url 定义完整的健康检查 URL，(如 http://${ip}:${port}/custom/health) 需要自定义协议、端口或特殊路径时
        health-check-path: /actuator/health
        health-check-interval: 30s
        # 优先以 ip 注册
        prefer-ip-address: true
      config:
        # 是否启用 Consul 配置中心，设置为 true。
        enabled: true
        # 这个参数决定了当Consul连接失败时，应用是否会立即失败并抛出异常。如果设置为true，那么在无法连接到Consul时，应用将无法启动。如果设置为false，那么在无法连接到Consul时，应用将继续启动，并记录一个警告。
        fail-fast: true
        # 配置的格式，这里设置为 YAML。
        format: yaml
        # 指定了在 Consul KV 中“查询配置”的前缀列表（可以理解为一级目录）
        # 当你的应用需要从多个前缀（namespace）加载配置时，就可以把它们用逗号分隔列在 prefixes 中
        prefixes: config
        # 默认的配置，更像是公共配置的文件夹名称，默认是 application，也就是说默认会从 application 和 spring.application.name 这两个命名空间去找配置
        default-context: application
        # 指定了在 "同一个前缀" 下，应用名（Application Name）和 Spring Profile 之间的拼接分隔符。
        # 当你有多个 Spring Profile（比如 dev、test、prod）时，Consul 中存储的 Key 会带上 Profile 后缀。Spring 拿到当前激活的 Profile（如 dev）后，会把它和应用名拼到一起，然后去对应的 KV 路径下查对应的配置。
        # 例如： 应用名是 myapp，Profile 是 dev，分隔符是默认的 ,，那么它会去搜索 myapp,dev 这个 Key（或目录）下的配置。
        profile-separator: '-'
        # 指定了在“某个前缀 + 应用名(+Profile)” 所对应的 KV 路径里，实际存放配置内容的子 Key 名称。
        # 可以理解为最终的配置文件名
        data-key: data
        watch:
          # 这个参数决定了是否启用Consul的配置自动刷新功能。如果设置为true，那么应用将会定期检查Consul中的配置是否有更新。如果有新的配置数据，应用将会自动刷新配置。如果设置为false，那么应用将不会自动刷新配置。
          enabled: true
          # delay属性控制的是服务启动后首次从Consul拉取配置的初始延迟时间。这个延迟是服务启动时，等待一个特定时间后才开始查询Consul获取配置更新。这个时间是以毫秒为单位。
          # 这个参数有助于减少在服务启动的初始阶段对Consul服务器的请求压力，并且对于服务刚刚启动时而言，并不总是立即需要最新的配置。
          delay: 1000
          # 属性设置了长轮询的等待时间（以秒为单位），这决定了检测配置更改的时间频率。通过减少这个值，可以让客户端更频繁地检查配置更改，进而减少配置刷新的延迟。
          # 假设wait-time为10秒，那么客户端会发起一个请求后等待最多10秒钟。如果这10秒内配置发生了更改，Consul会立即返回响应，客户端就会收到更新的配置。如果10秒内没有更改，请求会超时，然后客户端将重新发起请求。
          wait-time: 1
    # # 存在多张网卡的时候，注册到注册中心的时候可能会出现 ip 地址混乱的情况，这可能导致请求并不通，这里忽略一下虚拟机的额外网卡
    inetutils:
      ignored-interfaces: [ 'VMware.*' ]
  # spring.config 是 Spring Boot 中用于控制配置文件加载行为的核心配置前缀，它提供了细粒度的配置管理能力
  config:
    # spring.config.import 属性被用来明确声明配置信息应从哪里被加载
    # * 在 Spring Boot 2.4及更高版本中，您需要在application.yml（或application.properties）文件中而不是在bootstrap.yml中指定spring.config.import属性。
    #
    import: 'optional:consul:'

  profiles:
    # 如果我们指定了一个不存在的环境的配置文件
    # 1.后备到默认配置(确实会,但是需要有一个无环境的主配置文件)
    # 2.部分配置可用(如果dev1不可用,那么会找其他的可以用的配置文件)
    # 3.启动失败(如果都没有,并且配置文件还强制需要加载)
    active: dev

#============================================== eureka 配置 ==============================================#
# Eureka 的配置项不像 Consul 一样都挂在 spring.cloud.* 下面，而是采用了一个独立命名空间：eureka.*
# 这里的配置无用的，仅作展示，同时引入两个注册中心是不可行的，会报错
# Field registration in org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration required a single bean, but 2 were found:
#	- eurekaRegistration: defined in BeanDefinition defined in class path resource [org/springframework/cloud/netflix/eureka/EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.class]
#	- consulRegistration: defined by method 'consulRegistration' in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]
# 非得要两个就只能手动实现 DiscoveryClient，自定义实现注册细节了
eureka:
  client:
    register-with-eureka: true
    fetch-registry: false
    serviceUrl:
      defaultZone: http://192.168.3.102:10001/eureka/
  instance:
    prefer-ip-address: true



management:
  endpoints:
    web:
      exposure:
        include: '*'