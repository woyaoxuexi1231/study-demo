<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.hulei</groupId>
        <artifactId>dependencies-parent</artifactId>
        <version>1.0.0.4-SNAPSHOT</version>
    </parent>

    <artifactId>helloapp-maven</artifactId>
    <packaging>war</packaging>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <build.finalName>helloApp</build.finalName>
    </properties>

    <dependencies>
        <!-- servlet-api 主要用于定义 Servlet 的架构与相关的功能 -->
        <!-- 包含类似于HttpServlet, HttpServletRequest, HttpServletResponse这些具体实现类 -->
        <!-- 通常在处理 HTTP 请求时使用，适合用于编写后端逻辑、请求处理、会话管理等。 -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <!-- 目前大部分JavaEE服务器(如 WildFly、TomEE、GlassFish 等),因此在部署应用时，这些服务器会提供这些库。所以这里可以仅在编译时使用这个库 -->
            <scope>provided</scope>
        </dependency>

        <!-- JSP 是一种基于 HTML 的网页视图技术，它允许开发者将 Java 代码嵌入到 HTML 中 -->
        <!-- 用于创建网页视图，适合用于生成动态内容，包括表单处理、数据显示等。 -->
        <dependency>
            <groupId>jakarta.servlet.jsp</groupId>
            <artifactId>jakarta.servlet.jsp-api</artifactId>
            <version>3.1.1</version>
            <!-- 原因和servlet-api一致 -->
            <scope>provided</scope>
        </dependency>


        <!-- ==================================================slf4j+log4j2=================================================== -->
        <!-- Slf4jWithLog4jExample是一个范例代码 -->
        <!-- 这是一个slf4j桥接到log4j2 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.32</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.17.1</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>

                    <!--
                    指定解压形式的 WAR 的默认输出目录，默认为 ${project.build.directory}/${project.build.finalName}
                    可以是外部 Web 容器的部署目录以便直接运行，比如 Tomcat 的 webapps 目录。
                    -->
                    <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>

                    <!-- 生成的 WAR 文件的目录。默认为 ${project.build.directory}。-->
                    <outputDirectory>${project.build.directory}</outputDirectory>

                    <!--
                    用于在 WAR 中包含额外文件的单个目录。这通常是你的 JSP 文件、HTML 文件、CSS 以及 JavaScript 文件的位置。默认为 ${basedir}/src/main/webapp。
                    warSourceDirectory 是为了主要的 Web 资源目录配置，而 webResources 是为了添加额外的文件或进行复杂的导入规则。

                    1. 似乎这个额外的打包内容会放入压缩包的根目录中
                    2. IDEA配置web模块的时候, 这个项目会自动定位到项目根目录的web文件夹下面, 我这里加了一个这个, 重新加载项目, 可以重新定位到 webapp
                    -->
                    <warSourceDirectory>${basedir}/src/main/webapp</warSourceDirectory>


                    <!--
                    warSourceDirectory 直接指定目录即可，而 webResources 提供了更复杂的配置选项来支持动态、精细的资源导入。
                    允许你指定其他需要包括在 WAR 包中的资源文件，这些文件可以是额外的静态文件，也可以来自于其他路径。
                        directory：指定资源文件所在目录。
                        targetPath：指定该资源在 WAR 包中的目的路径。
                        includes 和 excludes：用于指定在资源集里需要包含或排除的文件模式。
                        filtering：对资源进行内容过滤，比如替换占位符等。
                    配置示例:

                    <webResources>
                        <resource>
                            <filtering>true</filtering>
                            <directory>web</directory>
                            <targetPath>/</targetPath>
                            <includes>
                                <include>**/**</include>
                            </includes>
                        </resource>
                    </webResources>
                     -->

                    <!--
                     默认情况下，maven-war-plugin 会从 src/main/webapp/WEB-INF/web.xml 路径读取 web.xml 文件。
                     如果你的 web.xml 文件位于其他位置，可以通过 webXml 配置项来指定其实际位置。
                     这里不配置, 因为我们的web.xml文件放在webapp下面, 上面又通过 warSourceDirectory 打包了整个webapp目录,所以这里不管
                     -->
                    <!-- <webXml>web/WEB-INF/web.xml</webXml> -->

                </configuration>
            </plugin>
        </plugins>
    </build>

</project>