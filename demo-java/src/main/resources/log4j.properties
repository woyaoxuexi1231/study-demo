# 设定logger的root
log4j.rootLogger=DEBUG,stdout,file

# log4j.appender.appenderName = className
# appenderName：自定义appderName，在log4j.rootLogger设置中使用；
# className：可设值如下：
#
# 1.org.apache.log4j.ConsoleAppender（控制台）
# 2.org.apache.log4j.FileAppender（文件）
# 3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
# 4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
# 5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#
# (1) ConsoleAppender选项
# Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
# ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
# Target=System.err：默认值是System.out。
#
# (2) FileAppender选项
# Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
# ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
# Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
# File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。
#
# (3) DailyRollingFileAppender选项
# Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
# ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
# Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
# File=D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。
# DatePattern='.'yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。
# 另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下：
# '.'yyyy-MM：每月
# '.'yyyy-ww：每周
# '.'yyyy-MM-dd：每天
# '.'yyyy-MM-dd-a：每天两次
# '.'yyyy-MM-dd-HH：每小时
# '.'yyyy-MM-dd-HH-mm：每分钟
#
# (4) RollingFileAppender选项
# Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
# ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
# Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
# File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。
# MaxFileSize=100KB：后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。
# MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。


# 控制台输出的相关配置 #
# 配置日志信息输出目的地
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# Target是输出目的地的目标
log4j.appender.stdout.Target=System.out
# 指定日志消息的输出最低层次
log4j.appender.stdout.Threshold=INFO
# 定义名为stdout的输出端的layout类型
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# 如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern
# ConversionPattern参数的格式含义
# 格式名 含义
# %c 输出日志信息所属的类的全名
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
# %f 输出日志信息所属的类的类名
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
# %m 输出代码中指定的信息，如log(message)中的message
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数
# %t 输出产生该日志事件的线程名
log4j.appender.stdout.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}-[%p]-(%C:%L) %m%n

# 文件输出的相关设置 #
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.Threshold=DEBUG
# 表示所有消息都会被立即输出，设为false则不输出，默认值是true。
log4j.appender.file.ImmediateFlush=true
# true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
log4j.appender.file.Append=true
# 指定当前消息输出到logging.log4j文件中。
log4j.appender.file.File=./logs/log.log4j
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%-5p] %d(%r) --> [%t] %l: %m %x %n